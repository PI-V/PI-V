generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String        @id @default(uuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  boards        Board[]
  contacts      Contact[]
  activityLogs  ActivityLog[]

  // WhatsApp settings
  whatsappHeader String? // Default header for all notifications

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

// Kanban models
model Board {
  id          String   @id @default(uuid())
  title       String
  description String?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  columns     Column[]

  // Visual customization
  backgroundColor String?
  backgroundImage String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("boards")
}

model Column {
  id      String @id @default(uuid())
  title   String
  order   Int // For maintaining column order
  boardId String
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  cards   Card[]

  // Column notification template
  notificationTemplate NotificationTemplate?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("columns")
}

model Card {
  id          String  @id @default(uuid())
  content     String
  description String?
  order       Int // For maintaining card order within a column
  columnId    String
  column      Column  @relation(fields: [columnId], references: [id], onDelete: Cascade)

  // Additional fields for cards
  priority      Priority  @default(MEDIUM)
  startDate     DateTime?
  dueDate       DateTime?
  completedDate DateTime?

  // WhatsApp notification fields
  contactId         String?
  contact           Contact? @relation(fields: [contactId], references: [id])
  sendNotifications Boolean  @default(true)

  // Card activity
  activities CardActivity[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cards")
}

// Enum for card priority
enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Contact model for WhatsApp notifications
model Contact {
  id             String @id @default(uuid())
  name           String
  whatsappNumber String // International format with country code
  userId         String
  user           User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  cards          Card[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contacts")
}

// Notification template model
model NotificationTemplate {
  id       String  @id @default(uuid())
  template String // The message template with variables
  columnId String  @unique
  column   Column  @relation(fields: [columnId], references: [id], onDelete: Cascade)
  isActive Boolean @default(true)
  enabled  Boolean @default(true) // Add this field for consistency with the code

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notification_templates")
}

// Card activity for tracking status changes
model CardActivity {
  id                String  @id @default(uuid())
  cardId            String
  card              Card    @relation(fields: [cardId], references: [id], onDelete: Cascade)
  fromColumnId      String?
  toColumnId        String
  notificationSent  Boolean @default(false)
  notificationError String?

  createdAt DateTime @default(now())

  @@map("card_activities")
}

// Activity log for user actions
model ActivityLog {
  id          String          @id @default(uuid())
  userId      String?
  user        User?           @relation(fields: [userId], references: [id], onDelete: SetNull)
  type        ActivityLogType
  description String
  cardId      String?
  columnId    String?
  boardId     String?
  metadata    Json? // Added to store additional data used in the code

  createdAt DateTime @default(now())

  @@map("activity_logs")
}

// Enum for activity log types to ensure consistency
enum ActivityLogType {
  CARD_CREATED
  CARD_UPDATED
  CARD_DELETED
  CARD_MOVED
  COLUMN_CREATED
  COLUMN_UPDATED
  COLUMN_DELETED
  BOARD_CREATED
  BOARD_UPDATED
  BOARD_DELETED
  NOTIFICATION_SENT
  NOTIFICATION_ERROR
  ERROR
  USER_LOGIN
  USER_LOGOUT
}
